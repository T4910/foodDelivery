datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = [ "native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x" ]
}

enum Roles {
  ADMIN 
  CUSTOMER
}

enum DeliverySpeed {
  SLOW // 8-10 mins 
  NORMAL // 10-15 mins
  FAST // 20-30 mins
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Roles      @default(CUSTOMER)
  cart          CartItem[]    
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}


model Food {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  description   String?
  image         String?
  calories      Float? 
  price         Float?
  stars         Int?      @default(0)
  tag           String[]

  carts     CartItem[]
  orders    OrderItem[]
}


model CartItem {
  id            String  @id @default(cuid()) @map("_id")
  userId        String
  foodId        String
  quantity      Int
  enteredAt     DateTime

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  food  Food  @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Order {
  id            String      @id @default(cuid()) @map("_id")
  userId        String
  orderDate     DateTime
  deliveryDate  DateTime?
  deliverySpeed DeliverySpeed? @default(NORMAL)
  totalPrice    Float //including tax & delivery fee
  items         OrderItem[]

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id          String   @id @default(cuid()) @map("_id")
  foodId      String
  orderId     String
  quantity    Int
  price       Float
  delivered   DateTime?

  food        Food     @relation(fields: [foodId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])
  @@unique([foodId])
}